function RANSequationsOperators2(basisCollectionFileName,  CFD_ResultsPath, RANS_OperatorsFileName, flagSB)

% The derivation of the matrices below are based on the equations in
% Norcowe report by CMR,"CFD model reduction for wind farm design, progress
% report 2011".
%
% State q=[ux,uy,uz,mu,k,p]', where for each f=ux,uy,uz,mu,k or p,
% f=[f(x1,y1,z1),...,f(xn,y1,z1),f(x1,y2,z1,...,f(xn,y2,z1),....]'.
%
% Basis vector Phi_m=[Phi_m_ux,Phi_m_uy,Phi_m_uz,Phi_m_mu,Phi_m_k,Phi_m_p]'.
%
% Advection term, A_m, m=1,...,M
%
%   rho*D_b(ua*ub), where a,b = x,y,z and D_b is partial derivative w.r.t b
%
%   rho*D_b(ua*ub) :=    
%            (rho/(2*hx))*[(ua*ux)(i+1,j,k)-(ua*ux)(i-1,j,k)]
%           +(rho/(2*hy))*[(ua*uy)(i,j+1,k)-(ua*uy)(i,j-1,k)]
%           +(rho/(2*hz))*[(ua*uz)(i,j,k+1)-(ua*uz)(i,j,k-1)],
%   where hx,hy,hz are the grid spaceings, and ua=ux,uy and uz.
%
%   For the above represented as A*q=A*[ux,uy,uz...], A takes the form, where 
%   gx=(rho/(2*hx)), gy=(rho/(2*hy)) and gz=(rho/(2*hz)),
%
%(x,y,z)=(1,2,2)  (2,2,2)           (nx,2,2) (1,3,2)  (2,3,2)
%   |--------------------------------------------------------------------
%   |       0 ................................................. terms for
%   | -gx*ux(1,2,2) 0 gx*ux(3,2,2) 0 0 ........................ uy amd uz
%   |            ....                           
%   |           -gx*ux(n-2,2,2) 0 gx*ux(n)   
%   |                                  0   
%   |                                       ...
%   |                                           0
%   |                                    -gx*ux(1,3,2)  0   gx*ux(3,3,2)
%   |                                       ...
%   | -gx*uy(1,2,2) 0 gx*uy(3,2,2) 0 .....           
%   |       ...                               
%   |       ...                             
%   | -gx*uz(1,2,2) 0 gx*uz(3,2,2) 0 .....       
%   |       ...                           
%   |       ...                           
%   |--------------------------------------------------------------------
%
%   Setting q=Ba=sum_m(a_m*Phi_m), we get A=sum_m(a_m*A_m), where A_m has
%   the structure given above, but u*=Phi_m_u*.
%
% Viscosity term, V_m, m=1,...,M
%
%   D_b(mu(D_b(ua)+D_a(ub))), where a,b=x,y,z and D_b is partial derivative w.r.t b
%
%   D_b(mu(D_b(ua)+D_a(ub)))= D_x(mu*D_x(ua)) + D_y(mu*D_y(ua)) + D_z(mu*D_z(ua))
%                             + D_x(mu*D_a(ux)) + D_y(mu*D_a(uy)) + D_z(mu*D_a(uz)),
%   where a=x,y and z.
%       
%   Each term above can be represented by the finite difference
%      D_x(mu*D_x(ux)) := 
%             (1/(2*hx))*[mu(i+1,j,k)*(ux(i+1,j,k)-ux(i,j,k))/hx - mu(i-1,j,k)*(ux(i,j,k)-ux(i-1,j,k))/hx]
%           = (1/(2*hx^2))*[mu(i-1,j,k), -mu(i-1,j,k)-mu(i+1,j,k), mu(i+1,j,k)] . [ux(i-1,j,k), ux(i,j,k), ux(i+1,j,k)]      
%   ,with similar expressions for the other terms.
%  
%  Originally written by Petter Furrebøe
%  Modifications : 1) Added the pressure operator.
%                  2) Added the tke term. 
% 
%  Modifications by: Vaibhav Bhutoria
%                  
%
           

disp('Computing operators for RANS Equations')

basisCollectionStruct = load(sprintf('%s%s%s', CFD_ResultsPath, 'bin\', basisCollectionFileName)); %'
nx = basisCollectionStruct.nx;
ny = basisCollectionStruct.ny;
nz = basisCollectionStruct.nz;
M = size(basisCollectionStruct.basisVectors,2);

if (flagSB == 1)
    Phi = basisCollectionStruct.basisVectors;    
    Phi2 = basisCollectionStruct.basisVectors2;
else
    Phi = basisCollectionStruct.basisVectors;
end
% N = size(Phi,1)/2;
clear basisCollectionStruct;


% hx=1;hy=1;hz=1;
hx=3;hy=3;hz=3;
rho=1; % Phi(:,m) is basis vector m

% Testing region of turbines.
% ibegin = 1; iend = 0;
% jbegin = 1; jend = 0;
% kbegin = 1; kend = 0;
ibegin = 27; iend = 33;
jbegin = 15; jend = 21;
kbegin = 21; kend = 27;
% % ibegin = 25; iend = 35;
% % jbegin = 13; jend = 23;
% % kbegin = 19; kend = 29;


% Advection term, A_m, m=1,...,M
%
% Genrating the matrices in Matlab takes a very long time
% The code below is replaced by mex function A_mex. Change to if(1)
% to generate the matrix with the Matlab code and compare it with
% the matrix generated by A_mex, with small values of nx,ny,nz.
for(m=1:M)  % A_m with A_mex
    %tic
    if (flagSB == 1)
        A_transpose=A_mex_check2(Phi(1:3*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz,...
            ibegin, iend, jbegin, jend, kbegin, kend);
        %time_to_cnv=toc
        %tic
        A{m}=(A_transpose)';%';

        A_transpose2=A_mex_check2(Phi2(1:3*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz,...
            ibegin, iend, jbegin, jend, kbegin, kend);
        %time_to_cnv=toc
        %tic
        A2{m}=(A_transpose2)';%';        
    else
        A_transpose=A_mex_check2(Phi(1:3*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz,...
            ibegin, iend, jbegin, jend, kbegin, kend);
        %time_to_cnv=toc
        %tic
        A{m}=(A_transpose)';%';
    end
    %time_to_transpose=toc
end
if(0)       % A_m with Matlab (very very slow)
    sparseMatSize = (3*3*2*(nz-2)*(ny-2)*(nx-2));    
for(m=1:M)
    A2{m}=sparse([],[],[],3*nz*ny*nx,3*nz*ny*nx,sparseMatSize);
    A2_tmp{m}=sparse([],[],[],3*nz*ny*nx,3*nz*ny*nx,sparseMatSize);
for(k=1:nz)disp(k);for(j=1:ny)for(i=1:nx)
    offset_ux=0;
    offset_uy=(nz*ny*nx);
    offset_uz=2*offset_uy;
                
    index_xminus=   (k-1)*(nx*ny)+(j-1)*nx+i-1;
    index_xplus=    (k-1)*(nx*ny)+(j-1)*nx+i+1;
    index_yminus=   (k-1)*(nx*ny)+(j-2)*nx+i;
    index_yplus=    (k-1)*(nx*ny)+(j)*nx+i;
    index_zminus=   (k-2)*(nx*ny)+(j-1)*nx+i;
    index_zplus=    (k)*(nx*ny)+(j-1)*nx+i;
    offset_ux=0;
    offset_uy=(nz*ny*nx);
    offset_uz=2*offset_uy;
    
    % a=x
    index_row=(k-1)*(nx*ny)+(j-1)*nx+i;
    A2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_ux+index_xminus,m);
    A2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_ux+index_xplus,m);
    A2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_ux+index_yminus,m);
    A2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_ux+index_yplus,m);
    A2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_ux+index_zminus,m);
    A2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_ux+index_zplus,m);
    
    % a=y
    index_row=index_row+offset_uy;
    A2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_uy+index_xminus,m);
    A2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_uy+index_xplus,m);
    A2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_uy+index_yminus,m);
    A2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_uy+index_yplus,m);
    A2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_uy+index_zminus,m);
    A2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_uy+index_zplus,m);
    
    % a=z
    index_row=index_row+offset_uy;
    A2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_uz+index_xminus,m);
    A2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_uz+index_xplus,m);
    A2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_uz+index_yminus,m);
    A2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_uz+index_yplus,m);
    A2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_uz+index_zminus,m);
    A2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_uz+index_zplus,m);


end;end;end;
TEST_A_equal_A2=all(all(A2{m}==A{m}))
end;
%full(A2{1})==full(A{1})
TEST_A_equal_A2=all(all(A2{1}==A{1}))
% TEST_A_equal_A2=all(all(A2_tmp{1}==A{1}))
end;%if(0)
% keyboard
% save('A.mat','A2');
% % clear('A','A_transpose');

% Viscosity term; V_m
%
for(m=1:M)  % V_m with V_mex
    if (flagSB == 1)
% %         PhiVm = [Phi(1:3*nz*ny*nx,m);Phi(1+5*nz*ny*nx:6*nz*ny*nx,m)];        
% %         PhiVm2 = [Phi2(1:3*nz*ny*nx,m);Phi2(1+5*nz*ny*nx:6*nz*ny*nx,m)];        
        
        V_transpose=V_mex_check2(Phi(1:4*nz*ny*nx,m),nx,ny,nz,hx,hy,hz, ... );
            ibegin, iend, jbegin, jend, kbegin, kend);        
% %         V_transpose=V_mex_check2(PhiVm(1:4*nz*ny*nx),nx,ny,nz,hx,hy,hz, ... );
% %             ibegin, iend, jbegin, jend, kbegin, kend);        
        V{m}=V_transpose';
        V_transpose2=V_mex_check2(Phi2(1:4*nz*ny*nx,m),nx,ny,nz,hx,hy,hz, ... );
            ibegin, iend, jbegin, jend, kbegin, kend);        
% %         V_transpose2=V_mex_check2(PhiVm2(1:4*nz*ny*nx),nx,ny,nz,hx,hy,hz, ... );
% %             ibegin, iend, jbegin, jend, kbegin, kend);        
        V2{m}=V_transpose2';        
    else
        PhiVm = [Phi(1:3*nz*ny*nx,m);Phi(1+5*nz*ny*nx:6*nz*ny*nx,m)];        
        V_transpose=V_mex_check2(Phi(1:4*nz*ny*nx,m),nx,ny,nz,hx,hy,hz, ... );
            ibegin, iend, jbegin, jend, kbegin, kend);        
        V{m}=V_transpose';
    end
end
if(0)       % A_m with Matlab (very very slow)
    sparseMatSize = (3*15*(nz-2)*(ny-2)*(nx-2));    
for(m=1:M)
    A2{m}=sparse([],[],[],3*nz*ny*nx,3*nz*ny*nx,sparseMatSize);
for(k=1:nz)disp(k);for(j=1:ny)for(i=1:nx)
            
    offset_ux=0;
    offset_uy=(nz*ny*nx);
    offset_uz=2*(nz*ny*nx);
    offset_mu=3*(nz*ny*nx);
                
     % V_m with Matlab (very very slow)

    
    index_xminus=   (k-1)*(nx*ny)+(j-1)*nx+i-1;
    index_xplus=    (k-1)*(nx*ny)+(j-1)*nx+i+1;
    index_yminus=   (k-1)*(nx*ny)+(j-2)*nx+i;
    index_yplus=    (k-1)*(nx*ny)+(j)*nx+i;
    index_zminus=   (k-2)*(nx*ny)+(j-1)*nx+i;
    index_zplus=    (k)*(nx*ny)+(j-1)*nx+i;
    index_xminus_yminus= (k-1)*(nx*ny)+(j-2)*nx+i-1;
    index_xplus_yplus= (k-1)*(nx*ny)+(j)*nx+i+1;
    index_xminus_zminus= (k-2)*(nx*ny)+(j-1)*nx+i-1;
    index_xplus_zplus= (k)*(nx*ny)+(j-1)*nx+i+1;
    index_yminus_zminus= (k-2)*(nx*ny)+(j-2)*nx+i;
    index_yplus_zplus= (k)*(nx*ny)+(j)*nx+i;
    offset_ux=0;
    offset_uy=(nz*ny*nx);
    offset_uz=2*(nz*ny*nx);
    offset_mu=3*(nz*ny*nx);
    
    % a=x
    %
    % D_x(mu*D_x(ua)) + D_y(mu*D_y(ua)) + D_z(mu*D_z(ua)), a=x :
    row_index=(k-1)*(nx*ny)+(j-1)*nx+i;
    V2{m}(row_index,index_xminus)=  (1/(2*hx^2))*   Phi(offset_mu+index_xminus,m);
    V2{m}(row_index,row_index)=    -(1/(2*hx^2))*   (Phi(offset_mu+index_xminus,m)+Phi(offset_mu+index_xplus,m));
    V2{m}(row_index,index_xplus)=   (1/(2*hx^2))*   Phi(offset_mu+index_xplus,m);
    V2{m}(row_index,index_yminus)=  (1/(2*hy^2))*   Phi(offset_mu+index_yminus,m);
    V2{m}(row_index,row_index)=   V2{m}(row_index,row_index) -(1/(2*hy^2))*(Phi(offset_mu+index_yminus,m)+Phi(offset_mu+index_yplus,m));
    V2{m}(row_index,index_yplus)=   (1/(2*hy^2))*   Phi(offset_mu+index_yplus,m);
    V2{m}(row_index,index_zminus)=  (1/(2*hz^2))*   Phi(offset_mu+index_zminus,m);
    V2{m}(row_index,row_index)=   V2{m}(row_index,row_index)-(1/(2*hz^2))*(Phi(offset_mu+index_zminus,m)+Phi(offset_mu+index_zplus,m));
    V2{m}(row_index,index_zplus)=   (1/(2*hz^2))*   Phi(offset_mu+index_zplus,m);
    % + D_x(mu*D_a(ux)) + D_y(mu*D_a(uy)) + D_z(mu*D_a(uz)), a=x
    %    D_x(mu*D_x(ux)):
    V2{m}(row_index,index_xminus)=  V2{m}(row_index,index_xminus) +     (1/(2*hx^2))*   Phi(offset_mu+index_xminus,m);
    V2{m}(row_index,row_index)=     V2{m}(row_index,row_index) -        (1/(2*hx^2))*(Phi(offset_mu+index_xminus,m)+Phi(offset_mu+index_xplus,m));
    V2{m}(row_index,index_xplus)=   V2{m}(row_index,index_xplus)+       (1/(2*hx^2))*   Phi(offset_mu+index_xplus,m);
    %    D_y(mu*D_x(uy))
    V2{m}(row_index,offset_uy+index_xminus_yminus)=  (1/(2*hy*hx))*Phi(offset_mu+index_yminus,m);
    V2{m}(row_index,offset_uy+index_yminus)=         -(1/(2*hy*hx))*Phi(offset_mu+index_yminus,m);
    V2{m}(row_index,offset_uy+index_yplus)=          -(1/(2*hy*hx))*Phi(offset_mu+index_yplus,m);
    V2{m}(row_index,offset_uy+index_xplus_yplus)=     (1/(2*hy*hx))*Phi(offset_mu+index_yplus,m);
    %    D_z(mu*D_x(uz))
    V2{m}(row_index,offset_uz+index_xminus_zminus)=  (1/(2*hz*hx))*Phi(offset_mu+index_zminus,m);
    V2{m}(row_index,offset_uz+index_zminus)=         -(1/(2*hz*hx))*Phi(offset_mu+index_zminus,m);
    V2{m}(row_index,offset_uz+index_zplus)=          -(1/(2*hz*hx))*Phi(offset_mu+index_zplus,m);
    V2{m}(row_index,offset_uz+index_xplus_zplus)=     (1/(2*hz*hx))*Phi(offset_mu+index_zplus,m);
    
    % a=y
    %
    % D_x(mu*D_x(ua)) + D_y(mu*D_y(ua)) + D_z(mu*D_z(ua)), a=y :
    row_index=row_index+offset_uy;
    V2{m}(row_index,offset_uy+index_xminus)=  (1/(2*hx^2))*   Phi(offset_mu+index_xminus,m);
    V2{m}(row_index,row_index)=    -(1/(2*hx^2))*   (Phi(offset_mu+index_xminus,m)+Phi(offset_mu+index_xplus,m));
    V2{m}(row_index,offset_uy+index_xplus)=   (1/(2*hx^2))*   Phi(offset_mu+index_xplus,m);
    V2{m}(row_index,offset_uy+index_yminus)=  (1/(2*hy^2))*   Phi(offset_mu+index_yminus,m);
    V2{m}(row_index,row_index)=   V2{m}(row_index,row_index) -(1/(2*hy^2))*(Phi(offset_mu+index_yminus,m)+Phi(offset_mu+index_yplus,m));
    V2{m}(row_index,offset_uy+index_yplus)=   (1/(2*hy^2))*   Phi(offset_mu+index_yplus,m);
    V2{m}(row_index,offset_uy+index_zminus)=  (1/(2*hz^2))*   Phi(offset_mu+index_zminus,m);
    V2{m}(row_index,row_index)=   V2{m}(row_index,row_index)-(1/(2*hz^2))*(Phi(offset_mu+index_zminus,m)+Phi(offset_mu+index_zplus,m));
    V2{m}(row_index,offset_uy+index_zplus)=   (1/(2*hz^2))*   Phi(offset_mu+index_zplus,m);
    % + D_x(mu*D_a(ux)) + D_y(mu*D_a(uy)) + D_z(mu*D_a(uz)), a=y
    %    D_x(mu*D_y(ux)):
    V2{m}(row_index,index_xminus_yminus)=  (1/(2*hx*hy))*Phi(offset_mu+index_xminus,m);
    V2{m}(row_index,index_xminus)=         -(1/(2*hx*hy))*Phi(offset_mu+index_xminus,m);
    V2{m}(row_index,index_xplus)=          -(1/(2*hx*hy))*Phi(offset_mu+index_xplus,m);
    V2{m}(row_index,index_xplus_yplus)=     (1/(2*hx*hy))*Phi(offset_mu+index_xplus,m);
    %    D_y(mu*D_y(uy)):
    V2{m}(row_index,offset_uy+index_yminus)= V2{m}(row_index,offset_uy+index_yminus) + (1/(2*hy^2))*Phi(offset_mu+index_yminus,m);
    V2{m}(row_index,row_index)=   V2{m}(row_index,row_index) -(1/(2*hy^2))*(Phi(offset_mu+index_yminus,m)+Phi(offset_mu+index_yplus,m));
    V2{m}(row_index,offset_uy+index_yplus)=  V2{m}(row_index,offset_uy+index_yplus) + (1/(2*hy^2))*Phi(offset_mu+index_yplus,m);
    %    D_z(mu*D_y(uz)):
    V2{m}(row_index,offset_uz+index_yminus_zminus)=   (1/(2*hz*hy))*Phi(offset_mu+index_zminus,m);
    V2{m}(row_index,offset_uz+index_zminus)=         -(1/(2*hz*hy))*Phi(offset_mu+index_zminus,m);
    V2{m}(row_index,offset_uz+index_zplus)=          -(1/(2*hz*hy))*Phi(offset_mu+index_zplus,m);
    V2{m}(row_index,offset_uz+index_yplus_zplus)=     (1/(2*hz*hy))*Phi(offset_mu+index_zplus,m);
    
    % a=z
    %
    % D_x(mu*D_x(ua)) + D_y(mu*D_y(ua)) + D_z(mu*D_z(ua)), a=z :
    row_index=row_index+offset_uy;
    V2{m}(row_index,offset_uz+index_xminus)=  (1/(2*hx^2))*   Phi(offset_mu+index_xminus,m);
    V2{m}(row_index,row_index)=    -(1/(2*hx^2))*   (Phi(offset_mu+index_xminus,m)+Phi(offset_mu+index_xplus,m));
    V2{m}(row_index,offset_uz+index_xplus)=   (1/(2*hx^2))*   Phi(offset_mu+index_xplus,m);
    V2{m}(row_index,offset_uz+index_yminus)=  (1/(2*hy^2))*   Phi(offset_mu+index_yminus,m);
    V2{m}(row_index,row_index)=   V2{m}(row_index,row_index) -(1/(2*hy^2))*(Phi(offset_mu+index_yminus,m)+Phi(offset_mu+index_yplus,m));
    V2{m}(row_index,offset_uz+index_yplus)=   (1/(2*hy^2))*   Phi(offset_mu+index_yplus,m);
    V2{m}(row_index,offset_uz+index_zminus)=  (1/(2*hz^2))*   Phi(offset_mu+index_zminus,m);
    V2{m}(row_index,row_index)=   V2{m}(row_index,row_index)-(1/(2*hz^2))*(Phi(offset_mu+index_zminus,m)+Phi(offset_mu+index_zplus,m));
    V2{m}(row_index,offset_uz+index_zplus)=   (1/(2*hz^2))*   Phi(offset_mu+index_zplus,m);
    % + D_x(mu*D_a(ux)) + D_y(mu*D_a(uy)) + D_z(mu*D_a(uz)), a=z
    %    D_x(mu*D_z(ux)):
    V2{m}(row_index,index_xminus_zminus)=  (1/(2*hx*hz))*Phi(offset_mu+index_xminus,m);
    V2{m}(row_index,index_xminus)=         -(1/(2*hx*hz))*Phi(offset_mu+index_xminus,m);
    V2{m}(row_index,index_xplus)=          -(1/(2*hx*hz))*Phi(offset_mu+index_xplus,m);
    V2{m}(row_index,index_xplus_zplus)=     (1/(2*hx*hz))*Phi(offset_mu+index_xplus,m);
    %    D_y(mu*D_z(uy)):
    V2{m}(row_index,offset_uy+index_yminus_zminus)=   (1/(2*hy*hz))*Phi(offset_mu+index_yminus,m);
    V2{m}(row_index,offset_uy+index_yminus)=         -(1/(2*hy*hz))*Phi(offset_mu+index_yminus,m);
    V2{m}(row_index,offset_uy+index_yplus)=          -(1/(2*hy*hz))*Phi(offset_mu+index_yplus,m);
    V2{m}(row_index,offset_uy+index_yplus_zplus)=     (1/(2*hy*hz))*Phi(offset_mu+index_yplus,m);
    %    D_z(mu*D_z(uz)):
    V2{m}(row_index,offset_uz+index_zminus)=  V2{m}(row_index,offset_uz+index_zminus) + (1/(2*hz^2))*   Phi(offset_mu+index_zminus,m);
    V2{m}(row_index,row_index)=   V2{m}(row_index,row_index)-(1/(2*hz^2))*(Phi(offset_mu+index_zminus,m)+Phi(offset_mu+index_zplus,m));
    V2{m}(row_index,offset_uz+index_zplus)=   V2{m}(row_index,offset_uz+index_zplus) + (1/(2*hz^2))*   Phi(offset_mu+index_zplus,m);

end;end;end;
all(all(V{m}==V2{m}))
end;
    all(all(V{1}==V2{1}))
end;%if(0)
% % save('V.mat','V');
% % clear('V','V_transpose');


% % % Pressure term
for(m=1:1)  % P_m with P_mex
    %tic
    if (flagSB == 1)
        P_transpose=P_mex_check3(Phi(1+4*nz*ny*nx:5*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz, ...);
            ibegin, iend, jbegin, jend, kbegin, kend);        
        %time_to_cnv=toc
        %tic
    %     disp('Check5')
        P{m}=(P_transpose)';%';
        %time_to_transpose=toc
        P_transpose2=P_mex_check3(Phi2(1+4*nz*ny*nx:5*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz, ...);
            ibegin, iend, jbegin, jend, kbegin, kend);        
        %time_to_cnv=toc
        %tic
    %     disp('Check5')
        P2{m}=(P_transpose2)';%';
        %time_to_transpose=toc
    else
        P_transpose=P_mex_check3(Phi(1+4*nz*ny*nx:5*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz, ...);
            ibegin, iend, jbegin, jend, kbegin, kend);        
        %time_to_cnv=toc
        %tic
    %     disp('Check5')
        P{m}=(P_transpose)';%';
        %time_to_transpose=toc
    end
end
if(0)       % A_m with Matlab (very very slow)
    sparseMatSize = (3*2*(nz-2)*(ny-2)*(nx-2));    
for(m=1:M)
    P2{m}=sparse([],[],[],3*nz*ny*nx,3*nz*ny*nx,sparseMatSize);
%     P2_tmp{m}=sparse([],[],[],3*nz*ny*nx,3*nz*ny*nx,sparseMatSize);
for(k=1:nz)disp(k);for(j=1:ny)for(i=1:nx)
%     offset_ux=0;
%     offset_uy=(nz*ny*nx);
%     offset_uz=2*offset_uy;
    offset_px=0;
    offset_py=(nz*ny*nx);
    offset_pz=2*offset_uy;
    offset_p= 4*(nx*ny*nz);
    
    index_xminus=   (k-1)*(nx*ny)+(j-1)*nx+i-1;
    index_xplus=    (k-1)*(nx*ny)+(j-1)*nx+i+1;
    index_yminus=   (k-1)*(nx*ny)+(j-2)*nx+i;
    index_yplus=    (k-1)*(nx*ny)+(j)*nx+i;
    index_zminus=   (k-2)*(nx*ny)+(j-1)*nx+i;
    index_zplus=    (k)*(nx*ny)+(j-1)*nx+i;
%     offset_kx=0;
%     offset_ky=(nz*ny*nx);
%     offset_kz=2*offset_uy;
%     offset_k= 4*(nx*ny*nz);
    
    % a=x
    index_row=(k-1)*(nx*ny)+(j-1)*nx+i;
    P2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_p+index_xminus,m);
    P2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_p+index_xplus,m);
%     P2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_ux+index_yminus,m);
%     P2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_ux+index_yplus,m);
%     P2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_ux+index_zminus,m);
%     P2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_ux+index_zplus,m);
    
    % a=y
    index_row=index_row+offset_py;
%     P2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_uy+index_xminus,m);
%     P2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_uy+index_xplus,m);
    P2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_p+index_yminus,m);
    P2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_p+index_yplus,m);
%     P2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_uy+index_zminus,m);
%     P2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_uy+index_zplus,m);
    
    % a=z
    index_row=index_row+offset_py;
%     P2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_uz+index_xminus,m);
%     P2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_uz+index_xplus,m);
%     P2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_uz+index_yminus,m);
%     P2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_uz+index_yplus,m);
    P2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_p+index_zminus,m);
    P2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_p+index_zplus,m);

end;end;end;
TEST_A_equal_P2=all(all(P2{m}==P{m}))
end;
%full(P2{1})==full(A{1})
TEST_A_equal_P2=all(all(P2{1}==P{1}))
% TEST_A_equal_P2=all(all(P2_tmp{1}==A{1}))
end;%if(0)


% % Turbulent Kinetic energy term

for(m=1:1)  % P_m with P_mex
    %tic
    if (flagSB == 1)
    K_transpose=K_mex_check3(Phi(1+5*nz*ny*nx:6*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz, ...);
        ibegin, iend, jbegin, jend, kbegin, kend);        
    %time_to_cnv=toc
    %tic
%     disp('Check5')
    K{m}=(K_transpose)';%';
    %time_to_transpose=toc
    K_transpose2=K_mex_check3(Phi2(1+5*nz*ny*nx:6*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz, ...);
        ibegin, iend, jbegin, jend, kbegin, kend);        
    %time_to_cnv=toc
    %tic
%     disp('Check5')
    K2{m}=(K_transpose2)';%';
    %time_to_transpose=toc
    else 
    K_transpose=K_mex_check3(Phi(1+5*nz*ny*nx:6*nz*ny*nx,m),rho,nx,ny,nz,hx,hy,hz, ...);
        ibegin, iend, jbegin, jend, kbegin, kend);        
    %time_to_cnv=toc
    %tic
%     disp('Check5')
    K{m}=(K_transpose)';%';
    %time_to_transpose=toc
        
    end
end
if(0)       % A_m with Matlab (very very slow)
    sparseMatSize = (3*2*(nz-2)*(ny-2)*(nx-2));    
for(m=1:M)
    K2{m}=sparse([],[],[],3*nz*ny*nx,3*nz*ny*nx,sparseMatSize);
%     K2_tmp{m}=sparse([],[],[],3*nz*ny*nx,3*nz*ny*nx,sparseMatSize);
for(k=1:nz)disp(k);for(j=1:ny)for(i=1:nx)
%     offset_ux=0;
%     offset_uy=(nz*ny*nx);
%     offset_uz=2*offset_uy;
    offset_kx=0;
    offset_ky=(nz*ny*nx);
    offset_kz=2*offset_uy;
    offset_k= 5*(nx*ny*nz);
    
    index_xminus=   (k-1)*(nx*ny)+(j-1)*nx+i-1;
    index_xplus=    (k-1)*(nx*ny)+(j-1)*nx+i+1;
    index_yminus=   (k-1)*(nx*ny)+(j-2)*nx+i;
    index_yplus=    (k-1)*(nx*ny)+(j)*nx+i;
    index_zminus=   (k-2)*(nx*ny)+(j-1)*nx+i;
    index_zplus=    (k)*(nx*ny)+(j-1)*nx+i;
%     offset_kx=0;
%     offset_ky=(nz*ny*nx);
%     offset_kz=2*offset_uy;
%     offset_k= 5*(nx*ny*nz);
    
    % a=x
    index_row=(k-1)*(nx*ny)+(j-1)*nx+i;
    K2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_k+index_xminus,m);
    K2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_k+index_xplus,m);
%     P2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_ux+index_yminus,m);
%     P2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_ux+index_yplus,m);
%     P2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_ux+index_zminus,m);
%     P2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_ux+index_zplus,m);
    
    % a=y
    index_row=index_row+offset_ky;
%     P2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_uy+index_xminus,m);
%     P2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_uy+index_xplus,m);
    K2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_k+index_yminus,m);
    K2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_k+index_yplus,m);
%     P2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_uy+index_zminus,m);
%     P2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_uy+index_zplus,m);
    
    % a=z
    index_row=index_row+offset_ky;
%     P2{m}(index_row,index_xminus)   = -(rho/(2*hx))*Phi(offset_uz+index_xminus,m);
%     P2{m}(index_row,index_xplus)    =  (rho/(2*hx))*Phi(offset_uz+index_xplus,m);
%     P2{m}(index_row,index_yminus)   = -(rho/(2*hy))*Phi(offset_uz+index_yminus,m);
%     P2{m}(index_row,index_yplus)    =  (rho/(2*hy))*Phi(offset_uz+index_yplus,m);
    K2{m}(index_row,index_zminus)   = -(rho/(2*hz))*Phi(offset_k+index_zminus,m);
    K2{m}(index_row,index_zplus)    =  (rho/(2*hz))*Phi(offset_k+index_zplus,m);

end;end;end;
TEST_A_equal_K2=all(all(K2{m}==K{m}))
end;
%full(P2{1})==full(A{1})
TEST_A_equal_K2=all(all(K2{1}==K{1}))
% TEST_A_equal_P2=all(all(P2_tmp{1}==A{1}))
end;%if(0)
% save(sprintf('%s%s%s', CFD_ResultsPath, 'bin\', RANS_OperatorsFileName), 'A', 'V', 'K', 'P')

if (flagSB == 1)
% N = size(basisVectors,1)/2;
    T_ijk = zeros(M,M,M);
    L_ij = zeros(M,M);
    T_ijk2 = zeros(M,M,M);
    L_ij2 = zeros(M,M);
    N = size(Phi,1)/2;
    tmp1 = ([Phi(1+4*nx*ny*nz:5*nx*ny*nz,:);Phi(1+4*nx*ny*nz:5*nx*ny*nz,:);Phi(1+4*nx*ny*nz:5*nx*ny*nz,:)]);
    tmp2 = ([Phi(1+5*nx*ny*nz:6*nx*ny*nz,:);Phi(1+5*nx*ny*nz:6*nx*ny*nz,:);Phi(1+5*nx*ny*nz:6*nx*ny*nz,:)]);

    Reduced_RANS_func = size(M,M);
    Reduced_RANS_Vector = size(M,1);
    % bbt = 
    % diff_A_phi_m_minus_V_phi_m = zeros(basisCollectionStruct.Phi,1):

    L_ij = ((transpose(Phi(1:3*nx*ny*nz,:)))*P{1}*tmp1) - ...
        ((transpose(Phi(1:3*nx*ny*nz,:)))*K{1}*tmp2);
    
    clear tmp1 tmp2

    for i = 1:M
        diff_A_phi_m_minus_V_phi_m = A{i} - V{i};

        T_ijk(:,:,i) =  (transpose(Phi(1:3*nx*ny*nz,:))...
        *diff_A_phi_m_minus_V_phi_m*Phi(1:3*nx*ny*nz,:)) ;%+ ...

    %     (P{1}*Phi(1+4*nx*ny*nz:5*nx*ny*nz,:)) - %...
    %     (K{1}*Phi(1+5*nx*ny*nz:6*nx*ny*nz,:));
    %     
    end
    % size(Reduced_RANS_func)
%     L_ij = ((transpose(Phi(1:3*nx*ny*nz,:)))*P{1}*tmp1) - ...
%         ((transpose(Phi(1:3*nx*ny*nz,:)))*K{1}*tmp2);
%     clear tmp1 tmp2 A V
    clear A V
    
    for i = 1:M
        diff_A_phi_m_minus_V_phi_m = A2{i} - V2{i};

        T_ijk2(:,:,i) =  (transpose(Phi2(1:3*nx*ny*nz,:))...
        *diff_A_phi_m_minus_V_phi_m*Phi2(1:3*nx*ny*nz,:)) ;%+ ...

    %     (P{1}*Phi(1+4*nx*ny*nz:5*nx*ny*nz,:)) - %...
    %     (K{1}*Phi(1+5*nx*ny*nz:6*nx*ny*nz,:));
    %     
    end
    % size(Reduced_RANS_func)
    tmp21 = ([Phi2(1+4*nx*ny*nz:5*nx*ny*nz,:);Phi2(1+4*nx*ny*nz:5*nx*ny*nz,:);Phi2(1+4*nx*ny*nz:5*nx*ny*nz,:)]);
    tmp22 = ([Phi2(1+5*nx*ny*nz:6*nx*ny*nz,:);Phi2(1+5*nx*ny*nz:6*nx*ny*nz,:);Phi2(1+5*nx*ny*nz:6*nx*ny*nz,:)]);
    
    L_ij2 = ((transpose(Phi2(1:3*nx*ny*nz,:)))*P2{1}*tmp21) - ...
        ((transpose(Phi2(1:3*nx*ny*nz,:)))*K2{1}*tmp22);
    clear tmp21 tmp22
else
    % N = size(basisVectors,1)/2;
    T_ijk = zeros(M,M,M);
    L_ij = zeros(M,M);
    N = size(Phi,1)/2;
    tmp1 = ([Phi(1+4*nx*ny*nz:5*nx*ny*nz,:);Phi(1+4*nx*ny*nz:5*nx*ny*nz,:);Phi(1+4*nx*ny*nz:5*nx*ny*nz,:)]);
    tmp2 = ([Phi(1+5*nx*ny*nz:6*nx*ny*nz,:);Phi(1+5*nx*ny*nz:6*nx*ny*nz,:);Phi(1+5*nx*ny*nz:6*nx*ny*nz,:)]);
    Reduced_RANS_func = size(M,M);
    Reduced_RANS_Vector = size(M,1);
    % bbt = 
    % diff_A_phi_m_minus_V_phi_m = zeros(basisCollectionStruct.Phi,1):


    for i = 1:M
        diff_A_phi_m_minus_V_phi_m = A{i} - V{i};
    if(i==1)
        check = (diff_A_phi_m_minus_V_phi_m*Phi(1:3*nx*ny*nz,:))...
            + (P{1}*tmp1)+(K{1}*tmp2);
    end
 
        T_ijk(:,:,i) =  (transpose(Phi(1:3*nx*ny*nz,:))...
        *diff_A_phi_m_minus_V_phi_m*Phi(1:3*nx*ny*nz,:)) ;%+ ...

    %     (P{1}*Phi(1+4*nx*ny*nz:5*nx*ny*nz,:)) - %...
    %     (K{1}*Phi(1+5*nx*ny*nz:6*nx*ny*nz,:));
    %     
    end
    % size(Reduced_RANS_func)
    L_ij = ((transpose(Phi(1:3*nx*ny*nz,:)))*(P{1}*tmp1-K{1}*tmp2)) ;
end
% keyboard;
if (flagSB == 1)
    save(sprintf('%s%s%s', CFD_ResultsPath, 'bin\', RANS_OperatorsFileName), 'L_ij', 'T_ijk', 'L_ij2', 'T_ijk2', 'N')
else
    save(sprintf('%s%s%s', CFD_ResultsPath, 'bin\', RANS_OperatorsFileName), 'L_ij', 'T_ijk', 'N')
end
disp('Finished RANS Equations')                  
end

% keyboard





